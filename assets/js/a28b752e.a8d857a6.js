"use strict";(self.webpackChunkwrangling=self.webpackChunkwrangling||[]).push([[106],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,y=d["".concat(s,".").concat(h)]||d[h]||c[h]||a;return n?o.createElement(y,i(i({ref:t},u),{},{components:n})):o.createElement(y,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4672:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={title:"The Zen of Python",sidebar_position:1},i=void 0,l={unversionedId:"modules/python-pandas/Background and Exercises/Python/zen-of-python",id:"modules/python-pandas/Background and Exercises/Python/zen-of-python",title:"The Zen of Python",description:"1.1.1 - The Zen of Python",source:"@site/docs/modules/python-pandas/Background and Exercises/Python/zen-of-python.md",sourceDirName:"modules/python-pandas/Background and Exercises/Python",slug:"/modules/python-pandas/Background and Exercises/Python/zen-of-python",permalink:"/modules/python-pandas/Background and Exercises/Python/zen-of-python",draft:!1,editUrl:"https://github.com/wustl-data/wustl-data.github.io/edit/main/docs/modules/python-pandas/Background and Exercises/Python/zen-of-python.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"The Zen of Python",sidebar_position:1},sidebar:"docSidebar",previous:{title:"1 - (re)Introduction to Python and Pandas",permalink:"/modules/python-pandas/"},next:{title:"Imports, Packages, and Modules",permalink:"/modules/python-pandas/Background and Exercises/Python/imports-packages-modules"}},s={},p=[{value:"1.1.1 - The Zen of Python",id:"111---the-zen-of-python",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"111---the-zen-of-python"},"1.1.1 - The Zen of Python"),(0,r.kt)("p",null,"The Python community generally agrees on standards and changes to Python via the ",(0,r.kt)("a",{parentName:"p",href:"https://www.python.org/dev/peps/"},"Python Enhancement Proposal (PEP)")," process. Early on in the development of Python, ",(0,r.kt)("a",{parentName:"p",href:"https://www.python.org/dev/peps/pep-0020/"},"PEP 20"),', referred to as the "Zen of Python", was written by Tim Peters and adopted by the community. Keeping these maxims in mind can go a long way towards writing clean, concise, and readable Python code. Here is the proposal in its entirety, with some of my favorites bolded for emphasis:'),(0,r.kt)("pre",null,"Beautiful is better than ugly.",(0,r.kt)("br",null),(0,r.kt)("b",null,"Explicit is better than implicit."),(0,r.kt)("br",null),"Simple is better than complex.",(0,r.kt)("br",null),"Complex is better than complicated.",(0,r.kt)("br",null),(0,r.kt)("b",null,"Flat is better than nested."),(0,r.kt)("br",null),"Sparse is better than dense.",(0,r.kt)("br",null),"Readability counts.",(0,r.kt)("br",null),"Special cases aren't special enough to break the rules.",(0,r.kt)("br",null),"Although practicality beats purity.",(0,r.kt)("br",null),"Errors should never pass silently.",(0,r.kt)("br",null),"Unless explicitly silenced.",(0,r.kt)("br",null),"In the face of ambiguity, refuse the temptation to guess.",(0,r.kt)("br",null),(0,r.kt)("b",null,"There should be one-- and preferably only one --obvious way to do it."),(0,r.kt)("br",null),"Although that way may not be obvious at first unless you're Dutch.",(0,r.kt)("br",null),"Now is better than never.",(0,r.kt)("br",null),"Although never is often better than *right* now.",(0,r.kt)("br",null),"If the implementation is hard to explain, it's a bad idea.",(0,r.kt)("br",null),"If the implementation is easy to explain, it may be a good idea.",(0,r.kt)("br",null),(0,r.kt)("b",null,"Namespaces are one honking great idea -- let's do more of those!")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Guido van Rossum, the creator of Python, is Dutch. ")))}c.isMDXComponent=!0}}]);