"use strict";(self.webpackChunkwrangling=self.webpackChunkwrangling||[]).push([[948],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),m=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=m(e.components);return o.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=m(r),g=n,h=p["".concat(c,".").concat(g)]||p[g]||l[g]||a;return r?o.createElement(h,i(i({ref:t},u),{},{components:r})):o.createElement(h,i({ref:t},u))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var m=2;m<a;m++)i[m]=r[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}p.displayName="MDXCreateElement"},3961:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var o=r(7462),n=(r(7294),r(3905));const a={title:"Commits",sidebar_position:2},i=void 0,s={unversionedId:"resources/git-github/git/commits",id:"resources/git-github/git/commits",title:"Commits",description:'A commit is a snapshot of your code at a given point in time in terms of changes that the program has seen since the last commit you made. Generally, you want to commit after you successfully make a change to the code so that the "snapshot" represents the code in a working state. The smaller this change, the smaller your commit, the better for code management and review.',source:"@site/docs/resources/git-github/git/commits.md",sourceDirName:"resources/git-github/git",slug:"/resources/git-github/git/commits",permalink:"/resources/git-github/git/commits",draft:!1,editUrl:"https://github.com/wustl-data/wustl-data.github.io/edit/main/docs/resources/git-github/git/commits.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Commits",sidebar_position:2},sidebar:"docSidebar",previous:{title:"Git",permalink:"/resources/git-github/git/"},next:{title:"git status",permalink:"/resources/git-github/git/git-status"}},c={},m=[],u={toc:m};function l(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"A ",(0,n.kt)("em",{parentName:"p"},"commit")," is a snapshot of your code at a given point in time in terms of changes that the program has seen since the last ",(0,n.kt)("em",{parentName:"p"},"commit"),' you made. Generally, you want to commit after you successfully make a change to the code so that the "snapshot" represents the code in a working state. The smaller this change, the smaller your commit, the better for code management and review. '),(0,n.kt)("p",null,"Commits require a commit ",(0,n.kt)("em",{parentName:"p"},"message"),', which is a short description of the changes you made. Conventionally, messages are phrased as an imperative, e.g. "Add a new feature" or "Fix a bug", to remind us that we are describing a change relative to the previous commit.'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git commit -m 'Update documentation'\n")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Take a second to examine ",(0,n.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/en/v1.0.0/"},"conventional commit")," syntax. These are a set of conventions for commit messages that are used in many open source projects. They are a great way to keep your commit messages consistent and informative. I will leave it up to you if you would like to develop this discipline now or later, but it is a good idea to get into the habit of writing informative commit messages. Making yourself write appropriate commit messages will also encourage you to make commits at appropriate times.")),(0,n.kt)("p",null,"However, before we can actually make a commit, we need to ",(0,n.kt)("em",{parentName:"p"},"stage")," some changes to that commit. Let's look at how we can use ",(0,n.kt)("inlineCode",{parentName:"p"},"git status")," to determine what changes we need to stage."))}l.isMDXComponent=!0}}]);