"use strict";(self.webpackChunkwrangling=self.webpackChunkwrangling||[]).push([[438],{3905:(e,a,t)=>{t.d(a,{Zo:()=>l,kt:()=>m});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=r.createContext({}),d=function(e){var a=r.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},l=function(e){var a=d(e.components);return r.createElement(c.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=d(t),m=n,h=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return t?r.createElement(h,s(s({ref:a},l),{},{components:t})):r.createElement(h,s({ref:a},l))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var c in a)hasOwnProperty.call(a,c)&&(i[c]=a[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var d=2;d<o;d++)s[d]=t[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6238:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=t(7462),n=(t(7294),t(3905));const o={title:"DataFrames",sidebar_position:2},s=void 0,i={unversionedId:"modules/python-pandas/Background and Exercises/pandas/dataframes",id:"modules/python-pandas/Background and Exercises/pandas/dataframes",title:"DataFrames",description:"A DataFrame is a 2-dimensional labeled data structure. It is a collection of Series objects, where each Series is a column of the DataFrame. Assuming good data organization, each column should represent a variable, and each row should represent an observation/record/data point. For example, if we have a collection of height and weight measurements, we could represent them as a DataFrame like:",source:"@site/docs/modules/python-pandas/Background and Exercises/pandas/dataframes.md",sourceDirName:"modules/python-pandas/Background and Exercises/pandas",slug:"/modules/python-pandas/Background and Exercises/pandas/dataframes",permalink:"/modules/python-pandas/Background and Exercises/pandas/dataframes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/modules/python-pandas/Background and Exercises/pandas/dataframes.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"DataFrames",sidebar_position:2},sidebar:"docSidebar",previous:{title:"Series",permalink:"/modules/python-pandas/Background and Exercises/pandas/series"},next:{title:"Slicing and Dicing",permalink:"/modules/python-pandas/Background and Exercises/pandas/slicing-dicing"}},c={},d=[],l={toc:d};function p(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},l,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"A DataFrame is a 2-dimensional labeled data structure. It is a collection of Series objects, where each Series is a column of the DataFrame. Assuming good data organization, each column should represent a variable, and each row should represent an observation/record/data point. For example, if we have a collection of height and weight measurements, we could represent them as a DataFrame like:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"measures = pd.DataFrame(\n    {\n        'height': [1.5, 1.6, 1.7, 1.8, 1.9],\n        'weight': [60, 65, 70, 75, 80]\n    },\n    index=['Ann', 'Brad', 'Charlie', 'Dan', 'Emma']\n)\n")),(0,n.kt)("p",null,"There are even more ways to initialize a DataFrame than there are to initialize a Series, but the above is the most common: a dictionary of equally-sized lists, where the keys are the column names and the values are the column data. "),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"This constructor is the same as the ",(0,n.kt)("inlineCode",{parentName:"p"},"from_dict")," constructor, and it is the default constructor for a Pandas instance.")),(0,n.kt)("p",null,"While the default constructor syntax is most common, I find the ",(0,n.kt)("inlineCode",{parentName:"p"},"from_records")," constructor to be more practical and conceptually useful. The tradeoff is that it is slightly more verbose."),(0,n.kt)("p",null,"Use the ",(0,n.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.from_records.html"},(0,n.kt)("inlineCode",{parentName:"a"},"from_records")," constructor")," to recreate the above DataFrame:"),(0,n.kt)("iframe",{width:"100%",height:"600px",src:"https://replit.com/team/data-wrangling/DataFrame-fromrecords"}))}p.isMDXComponent=!0}}]);