"use strict";(self.webpackChunkwrangling=self.webpackChunkwrangling||[]).push([[8403],{3905:(t,e,a)=>{a.d(e,{Zo:()=>u,kt:()=>k});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var m=n.createContext({}),d=function(t){var e=n.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},u=function(t){var e=d(t.components);return n.createElement(m.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},s=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,m=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),s=d(a),k=r,N=s["".concat(m,".").concat(k)]||s[k]||p[k]||l;return a?n.createElement(N,i(i({ref:e},u),{},{components:a})):n.createElement(N,i({ref:e},u))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=s;var o={};for(var m in e)hasOwnProperty.call(e,m)&&(o[m]=e[m]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},5438:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const l={title:"Normalized Data",sidebar_position:3},i=void 0,o={unversionedId:"modules/normalization/normal",id:"modules/normalization/normal",title:"Normalized Data",description:"Codd-Normal Form",source:"@site/docs/modules/normalization/normal.md",sourceDirName:"modules/normalization",slug:"/modules/normalization/normal",permalink:"/modules/normalization/normal",draft:!1,editUrl:"https://github.com/wustl-data/wustl-data.github.io/edit/main/docs/modules/normalization/normal.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Normalized Data",sidebar_position:3},sidebar:"docSidebar",previous:{title:"Tidying in Pandas",permalink:"/modules/normalization/pandas"},next:{title:"Why does it matter?",permalink:"/modules/normalization/benefits"}},m={},d=[{value:"Codd-Normal Form",id:"codd-normal-form",level:2},{value:"First Normal Form",id:"first-normal-form",level:3},{value:"Second Normal Form",id:"second-normal-form",level:3},{value:"Electric toothbrush models",id:"electric-toothbrush-models",level:4},{value:"Third Normal Form",id:"third-normal-form",level:3},{value:"Tournament Winners",id:"tournament-winners",level:4},{value:"Summary",id:"summary",level:2}],u={toc:d};function p(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"codd-normal-form"},"Codd-Normal Form"),(0,r.kt)("p",null,"In the previous section, we saw that Hadley Wickham referenced a 1960 paper by Edgar F. Codd, which introduced the concept of relational databases. In this section, we will look at the Codd Normal Form, which is a set of rules for organizing data in a relational database."),(0,r.kt)("p",null,'Generally, the "Normal Forms" increase in strictness with number. If a database is in 3NF, it is also in 2NF and 1NF; if a database is in 2NF, it is also in 1NF, etc.'),(0,r.kt)("h3",{id:"first-normal-form"},"First Normal Form"),(0,r.kt)("p",null,"The first normal form is the most basic. It requires that each cell in a table be a single value. No multi-valued cells are allowed. For example, the following table is not in 1NF:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"id"),(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"friends"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Bob"),(0,r.kt)("td",{parentName:"tr",align:null},"Alice, Charlie, Dave")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Alice"),(0,r.kt)("td",{parentName:"tr",align:null},"Bob, Charlie, Dave")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"friends")," column contains multiple values, so this table is not in 1NF."),(0,r.kt)("p",null,"To fix this, we can split the ",(0,r.kt)("inlineCode",{parentName:"p"},"friends"),' column into multiple columns, one for each friend. This is called "decomposition" and is a common technique for converting non-1NF tables into 1NF tables. The following table is in 1NF:'),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"id"),(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"friend1"),(0,r.kt)("th",{parentName:"tr",align:null},"friend2"),(0,r.kt)("th",{parentName:"tr",align:null},"friend3"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Bob"),(0,r.kt)("td",{parentName:"tr",align:null},"Alice"),(0,r.kt)("td",{parentName:"tr",align:null},"Charlie"),(0,r.kt)("td",{parentName:"tr",align:null},"Dave")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Alice"),(0,r.kt)("td",{parentName:"tr",align:null},"Bob"),(0,r.kt)("td",{parentName:"tr",align:null},"Charlie"),(0,r.kt)("td",{parentName:"tr",align:null},"Dave")))),(0,r.kt)("h3",{id:"second-normal-form"},"Second Normal Form"),(0,r.kt)("p",null,"The second normal form requires that the table be in 1NF, and a second requirement that can get a little confusing."),(0,r.kt)("p",null,"Let's use the definition and examples from ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Database_normalization#Second_normal_form_(2NF)"},"Wikipedia")," to explore this statement:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"}," It does not have any non-prime attribute that is functionally dependent on any proper subset of any candidate key of the relation. "),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"A non-prime attribute of a relation is an attribute that is not a part of any candidate key of the relation. "))),(0,r.kt)("p",null,"Here is an example of a table that is not in 2NF:"),(0,r.kt)("h4",{id:"electric-toothbrush-models"},"Electric toothbrush models"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Manufacturer"),(0,r.kt)("th",{parentName:"tr",align:null},"Model"),(0,r.kt)("th",{parentName:"tr",align:null},"Manufacturer Country"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Forte"),(0,r.kt)("td",{parentName:"tr",align:null},"X-Prime"),(0,r.kt)("td",{parentName:"tr",align:null},"Italy")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Forte"),(0,r.kt)("td",{parentName:"tr",align:null},"Ultraclean"),(0,r.kt)("td",{parentName:"tr",align:null},"Italy")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Dent-o-fresh"),(0,r.kt)("td",{parentName:"tr",align:null},"EZbrush"),(0,r.kt)("td",{parentName:"tr",align:null},"USA")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Brushmaster"),(0,r.kt)("td",{parentName:"tr",align:null},"Superbrush"),(0,r.kt)("td",{parentName:"tr",align:null},"USA")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Kobayashi"),(0,r.kt)("td",{parentName:"tr",align:null},"ST-60"),(0,r.kt)("td",{parentName:"tr",align:null},"Japan")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Hoch"),(0,r.kt)("td",{parentName:"tr",align:null},"Toothmaster"),(0,r.kt)("td",{parentName:"tr",align:null},"Germany")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Hoch"),(0,r.kt)("td",{parentName:"tr",align:null},"X-Prime"),(0,r.kt)("td",{parentName:"tr",align:null},"Germany")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Exercise: "),(0,r.kt)("ol",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ol"},'What is the "candidate key" for this table?'),(0,r.kt)("li",{parentName:"ol"},'What are the "prime attributes"?'),(0,r.kt)("li",{parentName:"ol"},'Which columns are "functionally dependent" on a prime attribute?'),(0,r.kt)("li",{parentName:"ol"},"How do we fix this table to make it 2NF?"))),(0,r.kt)("h3",{id:"third-normal-form"},"Third Normal Form"),(0,r.kt)("p",null,"The third normal form requires that the table be in 2NF, and a yet another confusingly-worded requirement:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"It does not have any non-prime attribute that is transitively dependent on any candidate key of the relation.")),(0,r.kt)("p",null,"Here is an example of a table that is not in 3NF, again borrowed from Wikipedia (slightly modified):"),(0,r.kt)("h4",{id:"tournament-winners"},"Tournament Winners"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Tournament"),(0,r.kt)("th",{parentName:"tr",align:null},"Year"),(0,r.kt)("th",{parentName:"tr",align:null},"Winner"),(0,r.kt)("th",{parentName:"tr",align:null},"Winner's Date of Birth"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Wimbledon"),(0,r.kt)("td",{parentName:"tr",align:null},"2019"),(0,r.kt)("td",{parentName:"tr",align:null},"Novak Djokovic"),(0,r.kt)("td",{parentName:"tr",align:null},"22 May 1987")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Wimbledon"),(0,r.kt)("td",{parentName:"tr",align:null},"2018"),(0,r.kt)("td",{parentName:"tr",align:null},"Roger Federer"),(0,r.kt)("td",{parentName:"tr",align:null},"8 August 1981")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Wimbledon"),(0,r.kt)("td",{parentName:"tr",align:null},"2017"),(0,r.kt)("td",{parentName:"tr",align:null},"Roger Federer"),(0,r.kt)("td",{parentName:"tr",align:null},"8 August 1981")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"US Open"),(0,r.kt)("td",{parentName:"tr",align:null},"2019"),(0,r.kt)("td",{parentName:"tr",align:null},"Rafael Nadal"),(0,r.kt)("td",{parentName:"tr",align:null},"3 June 1986")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"US Open"),(0,r.kt)("td",{parentName:"tr",align:null},"2018"),(0,r.kt)("td",{parentName:"tr",align:null},"Novak Djokovic"),(0,r.kt)("td",{parentName:"tr",align:null},"22 May 1987")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"US Open"),(0,r.kt)("td",{parentName:"tr",align:null},"2017"),(0,r.kt)("td",{parentName:"tr",align:null},"Roger Federer"),(0,r.kt)("td",{parentName:"tr",align:null},"8 August 1981")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Exercise:"),(0,r.kt)("ol",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ol"},"Perform the same steps as above to analyze the data's structure and come up with a fix."),(0,r.kt)("li",{parentName:"ol"},"What is the difference between this example and the previous one? How does this help you understand the definition of 3NF provided?"),(0,r.kt)("li",{parentName:"ol"},"When might it be acceptable to stick with 2NF instead of 3NF?"))),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"The three normal forms can often be summed up in this pithy expression:"),(0,r.kt)("p",null,"Every non key attribute depends on:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The key"),(0,r.kt)("li",{parentName:"ol"},"The whole key"),(0,r.kt)("li",{parentName:"ol"},"And nothing but the key")),(0,r.kt)("p",null,"(So help me Codd)"))}p.isMDXComponent=!0}}]);